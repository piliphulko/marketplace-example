// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: service-data-customer.proto

package core

import (
	context "context"
	basic "github.com/piliphulko/marketplace-example/api/basic"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataCustomer_GetCustomerInfo_FullMethodName   = "/DataCustomer/GetCustomerInfo"
	DataCustomer_GetCustomerOrders_FullMethodName = "/DataCustomer/GetCustomerOrders"
	DataCustomer_GetWalletInfo_FullMethodName     = "/DataCustomer/GetWalletInfo"
)

// DataCustomerClient is the client API for DataCustomer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataCustomerClient interface {
	GetCustomerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*basic.CustomerInfo, error)
	GetCustomerOrders(ctx context.Context, in *basic.OrderStatus, opts ...grpc.CallOption) (*basic.Orders, error)
	GetWalletInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*basic.WalletInfo, error)
}

type dataCustomerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCustomerClient(cc grpc.ClientConnInterface) DataCustomerClient {
	return &dataCustomerClient{cc}
}

func (c *dataCustomerClient) GetCustomerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*basic.CustomerInfo, error) {
	out := new(basic.CustomerInfo)
	err := c.cc.Invoke(ctx, DataCustomer_GetCustomerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCustomerClient) GetCustomerOrders(ctx context.Context, in *basic.OrderStatus, opts ...grpc.CallOption) (*basic.Orders, error) {
	out := new(basic.Orders)
	err := c.cc.Invoke(ctx, DataCustomer_GetCustomerOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCustomerClient) GetWalletInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*basic.WalletInfo, error) {
	out := new(basic.WalletInfo)
	err := c.cc.Invoke(ctx, DataCustomer_GetWalletInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCustomerServer is the server API for DataCustomer service.
// All implementations must embed UnimplementedDataCustomerServer
// for forward compatibility
type DataCustomerServer interface {
	GetCustomerInfo(context.Context, *emptypb.Empty) (*basic.CustomerInfo, error)
	GetCustomerOrders(context.Context, *basic.OrderStatus) (*basic.Orders, error)
	GetWalletInfo(context.Context, *emptypb.Empty) (*basic.WalletInfo, error)
	mustEmbedUnimplementedDataCustomerServer()
}

// UnimplementedDataCustomerServer must be embedded to have forward compatible implementations.
type UnimplementedDataCustomerServer struct {
}

func (UnimplementedDataCustomerServer) GetCustomerInfo(context.Context, *emptypb.Empty) (*basic.CustomerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerInfo not implemented")
}
func (UnimplementedDataCustomerServer) GetCustomerOrders(context.Context, *basic.OrderStatus) (*basic.Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerOrders not implemented")
}
func (UnimplementedDataCustomerServer) GetWalletInfo(context.Context, *emptypb.Empty) (*basic.WalletInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInfo not implemented")
}
func (UnimplementedDataCustomerServer) mustEmbedUnimplementedDataCustomerServer() {}

// UnsafeDataCustomerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataCustomerServer will
// result in compilation errors.
type UnsafeDataCustomerServer interface {
	mustEmbedUnimplementedDataCustomerServer()
}

func RegisterDataCustomerServer(s grpc.ServiceRegistrar, srv DataCustomerServer) {
	s.RegisterService(&DataCustomer_ServiceDesc, srv)
}

func _DataCustomer_GetCustomerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCustomerServer).GetCustomerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataCustomer_GetCustomerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCustomerServer).GetCustomerInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCustomer_GetCustomerOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(basic.OrderStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCustomerServer).GetCustomerOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataCustomer_GetCustomerOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCustomerServer).GetCustomerOrders(ctx, req.(*basic.OrderStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCustomer_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCustomerServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataCustomer_GetWalletInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCustomerServer).GetWalletInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DataCustomer_ServiceDesc is the grpc.ServiceDesc for DataCustomer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataCustomer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataCustomer",
	HandlerType: (*DataCustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomerInfo",
			Handler:    _DataCustomer_GetCustomerInfo_Handler,
		},
		{
			MethodName: "GetCustomerOrders",
			Handler:    _DataCustomer_GetCustomerOrders_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _DataCustomer_GetWalletInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service-data-customer.proto",
}
