// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: service-data-warehouse.proto

package core

import (
	context "context"
	basic "github.com/piliphulko/marketplace-example/api/basic"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataWarehouse_GetAcctInfo_FullMethodName            = "/service_data_warehouse.DataWarehouse/GetAcctInfo"
	DataWarehouse_GetArrayOrdersCustomer_FullMethodName = "/service_data_warehouse.DataWarehouse/GetArrayOrdersCustomer"
)

// DataWarehouseClient is the client API for DataWarehouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataWarehouseClient interface {
	GetAcctInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*basic.WarehouseInfo, error)
	GetArrayOrdersCustomer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*basic.ArrayOrdersCustomer, error)
}

type dataWarehouseClient struct {
	cc grpc.ClientConnInterface
}

func NewDataWarehouseClient(cc grpc.ClientConnInterface) DataWarehouseClient {
	return &dataWarehouseClient{cc}
}

func (c *dataWarehouseClient) GetAcctInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*basic.WarehouseInfo, error) {
	out := new(basic.WarehouseInfo)
	err := c.cc.Invoke(ctx, DataWarehouse_GetAcctInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataWarehouseClient) GetArrayOrdersCustomer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*basic.ArrayOrdersCustomer, error) {
	out := new(basic.ArrayOrdersCustomer)
	err := c.cc.Invoke(ctx, DataWarehouse_GetArrayOrdersCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataWarehouseServer is the server API for DataWarehouse service.
// All implementations must embed UnimplementedDataWarehouseServer
// for forward compatibility
type DataWarehouseServer interface {
	GetAcctInfo(context.Context, *emptypb.Empty) (*basic.WarehouseInfo, error)
	GetArrayOrdersCustomer(context.Context, *emptypb.Empty) (*basic.ArrayOrdersCustomer, error)
	mustEmbedUnimplementedDataWarehouseServer()
}

// UnimplementedDataWarehouseServer must be embedded to have forward compatible implementations.
type UnimplementedDataWarehouseServer struct {
}

func (UnimplementedDataWarehouseServer) GetAcctInfo(context.Context, *emptypb.Empty) (*basic.WarehouseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcctInfo not implemented")
}
func (UnimplementedDataWarehouseServer) GetArrayOrdersCustomer(context.Context, *emptypb.Empty) (*basic.ArrayOrdersCustomer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArrayOrdersCustomer not implemented")
}
func (UnimplementedDataWarehouseServer) mustEmbedUnimplementedDataWarehouseServer() {}

// UnsafeDataWarehouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataWarehouseServer will
// result in compilation errors.
type UnsafeDataWarehouseServer interface {
	mustEmbedUnimplementedDataWarehouseServer()
}

func RegisterDataWarehouseServer(s grpc.ServiceRegistrar, srv DataWarehouseServer) {
	s.RegisterService(&DataWarehouse_ServiceDesc, srv)
}

func _DataWarehouse_GetAcctInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataWarehouseServer).GetAcctInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataWarehouse_GetAcctInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataWarehouseServer).GetAcctInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataWarehouse_GetArrayOrdersCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataWarehouseServer).GetArrayOrdersCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataWarehouse_GetArrayOrdersCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataWarehouseServer).GetArrayOrdersCustomer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DataWarehouse_ServiceDesc is the grpc.ServiceDesc for DataWarehouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataWarehouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_data_warehouse.DataWarehouse",
	HandlerType: (*DataWarehouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAcctInfo",
			Handler:    _DataWarehouse_GetAcctInfo_Handler,
		},
		{
			MethodName: "GetArrayOrdersCustomer",
			Handler:    _DataWarehouse_GetArrayOrdersCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service-data-warehouse.proto",
}
