// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: server-account-aut.proto

package aaGrpc

import (
	context "context"
	basic "github.com/piliphulko/marketplace-example/internal/proto-genr/basic"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountAut_AutAccount_FullMethodName    = "/aagrpc.AccountAut/AutAccount"
	AccountAut_CreateAccount_FullMethodName = "/aagrpc.AccountAut/CreateAccount"
	AccountAut_UpdateAccount_FullMethodName = "/aagrpc.AccountAut/UpdateAccount"
)

// AccountAutClient is the client API for AccountAut service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountAutClient interface {
	AutAccount(ctx context.Context, in *basic.LoginPass, opts ...grpc.CallOption) (*basic.Reply, error)
	CreateAccount(ctx context.Context, in *basic.AccountInfo, opts ...grpc.CallOption) (*basic.Reply, error)
	UpdateAccount(ctx context.Context, in *basic.AccountInfo, opts ...grpc.CallOption) (*basic.Reply, error)
}

type accountAutClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountAutClient(cc grpc.ClientConnInterface) AccountAutClient {
	return &accountAutClient{cc}
}

func (c *accountAutClient) AutAccount(ctx context.Context, in *basic.LoginPass, opts ...grpc.CallOption) (*basic.Reply, error) {
	out := new(basic.Reply)
	err := c.cc.Invoke(ctx, AccountAut_AutAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountAutClient) CreateAccount(ctx context.Context, in *basic.AccountInfo, opts ...grpc.CallOption) (*basic.Reply, error) {
	out := new(basic.Reply)
	err := c.cc.Invoke(ctx, AccountAut_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountAutClient) UpdateAccount(ctx context.Context, in *basic.AccountInfo, opts ...grpc.CallOption) (*basic.Reply, error) {
	out := new(basic.Reply)
	err := c.cc.Invoke(ctx, AccountAut_UpdateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountAutServer is the server API for AccountAut service.
// All implementations must embed UnimplementedAccountAutServer
// for forward compatibility
type AccountAutServer interface {
	AutAccount(context.Context, *basic.LoginPass) (*basic.Reply, error)
	CreateAccount(context.Context, *basic.AccountInfo) (*basic.Reply, error)
	UpdateAccount(context.Context, *basic.AccountInfo) (*basic.Reply, error)
	mustEmbedUnimplementedAccountAutServer()
}

// UnimplementedAccountAutServer must be embedded to have forward compatible implementations.
type UnimplementedAccountAutServer struct {
}

func (UnimplementedAccountAutServer) AutAccount(context.Context, *basic.LoginPass) (*basic.Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutAccount not implemented")
}
func (UnimplementedAccountAutServer) CreateAccount(context.Context, *basic.AccountInfo) (*basic.Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountAutServer) UpdateAccount(context.Context, *basic.AccountInfo) (*basic.Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountAutServer) mustEmbedUnimplementedAccountAutServer() {}

// UnsafeAccountAutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountAutServer will
// result in compilation errors.
type UnsafeAccountAutServer interface {
	mustEmbedUnimplementedAccountAutServer()
}

func RegisterAccountAutServer(s grpc.ServiceRegistrar, srv AccountAutServer) {
	s.RegisterService(&AccountAut_ServiceDesc, srv)
}

func _AccountAut_AutAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(basic.LoginPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountAutServer).AutAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountAut_AutAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountAutServer).AutAccount(ctx, req.(*basic.LoginPass))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountAut_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(basic.AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountAutServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountAut_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountAutServer).CreateAccount(ctx, req.(*basic.AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountAut_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(basic.AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountAutServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountAut_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountAutServer).UpdateAccount(ctx, req.(*basic.AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountAut_ServiceDesc is the grpc.ServiceDesc for AccountAut service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountAut_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aagrpc.AccountAut",
	HandlerType: (*AccountAutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutAccount",
			Handler:    _AccountAut_AutAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountAut_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountAut_UpdateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server-account-aut.proto",
}
